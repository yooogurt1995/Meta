from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
import random
import datetime
import asyncio
import logging
import os
import sqlite3
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# Replace with your actual Telegram bot token
API_TOKEN = '7854106709:AAHeIIyM3aUH8cxzIX68MgOxzA-XgKQ4-r0'

# Initialize logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
scheduler = AsyncIOScheduler()

# Database setup
db_path = "bot_users.db"

def init_db():
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        daily_count INTEGER DEFAULT 0,
                        last_reset TEXT
                      )''')
    conn.commit()
    conn.close()

init_db()

def add_username_column():
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü username
    cursor.execute("PRAGMA table_info(users)")
    columns = [info[1] for info in cursor.fetchall()]
    if "username" not in columns:
        cursor.execute("ALTER TABLE users ADD COLUMN username TEXT")
        conn.commit()
    conn.close()

# –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
add_username_column()

def get_user_data(user_id):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT daily_count, last_reset FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result

def set_user_data(user_id, daily_count, last_reset, username=None):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute(
        "REPLACE INTO users (user_id, daily_count, last_reset, username) VALUES (?, ?, ?, ?)",
        (user_id, daily_count, last_reset, username)
    )
    conn.commit()
    conn.close()

def reset_user_attempts():
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ <= MAX_ATTEMPTS –∏ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞
    cursor.execute("""
        UPDATE users 
        SET daily_count = 0, last_reset = ?
        WHERE daily_count <= ? AND (julianday(?) - julianday(last_reset)) >= 1
    """, (datetime.datetime.now().isoformat(), MAX_ATTEMPTS, datetime.datetime.now().isoformat()))

    conn.commit()
    conn.close()

# Maximum daily attempts
MAX_ATTEMPTS = 5

# Define keyboards
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")],
        [KeyboardButton(text="\u2728 –û –∫–∞—Ä—Ç–∞—Ö"), KeyboardButton(text="\u2753 –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç–∞—Ä–æ–ª–æ–≥—É")],
        [KeyboardButton(text="\u2605 –ú–æ–π —Ç–∞—Ä–∏—Ñ")]
    ],
    resize_keyboard=True
)

# Define path for card images
CARD_IMAGES_PATH = "./card_images"

# Ensure the directory exists
if not os.path.exists(CARD_IMAGES_PATH):
    os.makedirs(CARD_IMAGES_PATH)

# Function to get random card images
def get_random_card_images(count=1):
    images = [f for f in os.listdir(CARD_IMAGES_PATH) if os.path.isfile(os.path.join(CARD_IMAGES_PATH, f))]
    if not images:
        raise FileNotFoundError("No card images found in the directory.")
    return random.sample(images, count)

# Function to send the daily card
async def send_daily_card():
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, username FROM users")
    users = cursor.fetchall()
    conn.close()

    for user_id, username in users:
        try:
            first_name = callback_query.from_user.first_name or "–¥—Ä—É–≥"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ first_name
            card_image = get_random_card_images(1)[0]
            image_path = os.path.join(CARD_IMAGES_PATH, card_image)
            await bot.send_photo(
                user_id,
                photo=FSInputFile(image_path),
                caption=f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {first_name}! –≠—Ç–æ —Ç–≤–æ—è –∫–∞—Ä—Ç–∞ –¥–Ω—è:"
            )
        except FileNotFoundError:
            logging.error("No card images found. Cannot send daily card.")

# Command handlers
@router.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    user_data = get_user_data(user_id)

    if user_data:
        set_user_data(user_id, user_data[0], user_data[1], username)
    else:
        set_user_data(user_id, 0, datetime.datetime.now().isoformat(), username)

    welcome_text = (
        f"{message.from_user.first_name}, –ø—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –ú–ê–ö –∫–∞—Ä—Ç–∞–º–∏ –æ—Ç –ê–ª–µ–Ω—ã –í–µ–Ω–≥–µ—Ä ‚ú®\n"
        "–ó–¥–µ—Å—å —Ç—ã –æ—Ç–∫—Ä–æ–µ—à—å –¥–ª—è —Å–µ–±—è –æ–≥—Ä–æ–º–Ω—ã–π –º–∏—Ä —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è, –≥–¥–µ –Ω–∞–π–¥–µ—à—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ü•∞\n\n"
        "–ú–ê–ö –∫–∞—Ä—Ç—ã - –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å–≤–æ–µ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ –±–µ–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.\n"
        "–ú–æ–∂–µ—à—å –¥–æ—Å—Ç–∞—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø—Ä–∏–Ω—è—Ç—å –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–∫–æ—É—á–∏–Ω–≥."
    )
    await message.answer(welcome_text, reply_markup=main_menu)


@router.message(Command(commands=['last_user']))
async def get_last_user(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_id = 327308286  # –í–∞—à Telegram ID
    if message.from_user.id != admin_id:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users ORDER BY rowid DESC LIMIT 1")
    result = cursor.fetchone()
    conn.close()

    if result:
        await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result[0]}")
    else:
        await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@router.message(Command(commands=['set_attempts']))
async def set_attempts(message: types.Message):
    admin_id = 327308286  # –í–∞—à Telegram ID
    if message.from_user.id != admin_id:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        _, user_id, attempts = message.text.split()
        user_id = int(user_id)
        attempts = int(attempts)

        user_data = get_user_data(user_id)
        if user_data:
            # –û–±–Ω–æ–≤–ª—è–µ–º daily_count
            last_reset = user_data[1]
            set_user_data(user_id, MAX_ATTEMPTS - attempts, last_reset)
            await message.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {attempts} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –û—Å—Ç–∞–ª–æ—Å—å: {attempts}.")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /set_attempts user_id attempts")

@router.message(Command(commands=['update_usernames']))
async def update_usernames(message: types.Message):
    admin_id = 327308286  # –í–∞—à Telegram ID
    if message.from_user.id != admin_id:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()

    updated_count = 0
    for user_id, in users:
        user = await bot.get_chat(user_id)
        username = user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        cursor.execute("UPDATE users SET username = ? WHERE user_id = ?", (username, user_id))
        updated_count += 1

    conn.commit()
    conn.close()

    await message.answer(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@router.message(Command(commands=['user_count']))
async def user_count(message: types.Message):
    admin_id = 327308286  # –í–∞—à Telegram ID
    if message.from_user.id != admin_id:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    conn.close()

    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {count}")

@router.message(Command(commands=['list_users']))
async def list_users(message: types.Message):
    admin_id = 327308286  # –í–∞—à Telegram ID
    if message.from_user.id != admin_id:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, username FROM users")
    users = cursor.fetchall()
    conn.close()

    if users:
        user_list = "\n".join([f"ID: {user[0]}, Username: @{user[1] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}" for user in users])
        await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")
    else:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@router.message(Command(commands=['broadcast']))
async def broadcast(message: types.Message):
    admin_id = 327308286  # –í–∞—à Telegram ID
    if message.from_user.id != admin_id:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(message.text.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä:\n/broadcast –í–∞—à —Ç–µ–∫—Å—Ç")
        return

    text = message.text.split(" ", 1)[1]

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    conn.close()

    for user_id, in users:
        try:
            await bot.send_message(user_id, text)
            await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@router.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
async def get_card_instruction(message: types.Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if not user_data:
        set_user_data(user_id, 0, datetime.datetime.now().isoformat())
        user_data = (0, datetime.datetime.now().isoformat())

    daily_count, last_reset = user_data
    last_reset_time = datetime.datetime.fromisoformat(last_reset)
    if (datetime.datetime.now() - last_reset_time).total_seconds() >= 86400:
        daily_count = 0
        last_reset_time = datetime.datetime.now()
        set_user_data(user_id, daily_count, last_reset_time.isoformat())

    if daily_count >= MAX_ATTEMPTS:
        await message.answer("–í–∞—à –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!")
        return

    instruction = (
        "\U0001F4DA –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É:\n"
        "1Ô∏è‚É£ –ó–∞–¥—É–º–∞–π—Ç–µ—Å—å –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç.\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É."
    )
    button = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="get_single_card")]]
    )
    await message.answer(instruction, reply_markup=button)

@router.message(lambda message: message.text == "\u2728 –û –∫–∞—Ä—Ç–∞—Ö")
async def about_cards(message: types.Message):
    about_text = (
        "‚ú® –û –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–∞—Ö:\n"
        "–ú–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã (–ú–ê–ö) ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–≤–æ–∏—Ö —ç–º–æ—Ü–∏—è—Ö –∏ –º—ã—Å–ª—è—Ö.\n"
        "–ö–∞—Ä—Ç—ã –Ω–µ –∏–º–µ—é—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –∞ –∏—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è."
    )
    await message.answer(about_text)
    
@router.message(lambda message: message.text == "\u2753 –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç–∞—Ä–æ–ª–æ–≥—É")
async def ask_tarologist(message: types.Message):
    await message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç —Å —Ç–∞—Ä–æ–ª–æ–≥–æ–º, –Ω–∞–∂–∞–≤ –Ω–∞ —Å—Å—ã–ª–∫—É: @alyona_venger")

@router.message(lambda message: message.text == "\u2605 –ú–æ–π —Ç–∞—Ä–∏—Ñ")
async def my_tariff(message: types.Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if user_data:
        daily_count, last_reset = user_data
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_limit = MAX_ATTEMPTS if daily_count <= MAX_ATTEMPTS else daily_count
        remaining_attempts = max(0, user_limit - daily_count)
        await message.answer(f"‚òÖ –í–∞—à —Ç–∞—Ä–∏—Ñ:\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}.")
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")



@router.callback_query(lambda c: c.data == "get_single_card")
async def send_single_card(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_data = get_user_data(user_id)
    if not user_data:
        set_user_data(user_id, 0, datetime.datetime.now().isoformat())
        user_data = (0, datetime.datetime.now().isoformat())

    daily_count, last_reset = user_data
    last_reset_time = datetime.datetime.fromisoformat(last_reset)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏
    if (datetime.datetime.now() - last_reset_time).total_seconds() >= 86400 and daily_count <= MAX_ATTEMPTS:
        daily_count = 0
        last_reset_time = datetime.datetime.now()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
    user_limit = MAX_ATTEMPTS if daily_count <= MAX_ATTEMPTS else daily_count

    if daily_count >= user_limit:
        await bot.send_message(user_id, "–í–∞—à –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!")
        await bot.answer_callback_query(callback_query.id)
        return

    daily_count += 1
    set_user_data(user_id, daily_count, last_reset_time.isoformat())

    remaining_attempts = max(0, user_limit - daily_count)

    try:
        card_image = get_random_card_images(1)[0]
        image_path = os.path.join(CARD_IMAGES_PATH, card_image)
        await bot.send_photo(
            user_id,
            photo=FSInputFile(image_path),
            caption=f"\U0001F4C4 –í–∞—à–∞ –∫–∞—Ä—Ç–∞. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}."
        )
        mini_instruction = (
            "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É, —á—Ç–æ –≤—ã –Ω–∞ –Ω–µ–π –≤–∏–¥–∏—Ç–µ? –ö–∞–∫–æ–π –æ—Ç–≤–µ—Ç –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≥–æ–ª–æ–≤—É? "
            "–ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å, —Ç—â–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –Ω—É–∂–Ω–∞—è –≤–∞–º –º—ã—Å–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–¥–µ—Ç."
        )
        button = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–Ø –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–∞—Ä—Ç–æ–π", callback_data="end_single_card")]]
        )
        await bot.send_message(user_id, mini_instruction, reply_markup=button)
    except FileNotFoundError:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –ø–∞–ø–∫—É.")

    await bot.answer_callback_query(callback_query.id)

@router.callback_query(lambda c: c.data == "end_single_card")
async def end_single_card(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    first_name = callback_query.from_user.first_name or "–¥—Ä—É–≥"
    user_data = get_user_data(user_id)
    daily_count = user_data[0] if user_data else 0
    remaining_attempts = max(0, MAX_ATTEMPTS - daily_count)

    question_text = (
        f"{first_name}, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å?"
    )
    buttons = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="response_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="response_no")]
        ]
    )
    await bot.send_message(user_id, question_text, reply_markup=buttons)
    await bot.answer_callback_query(callback_query.id)

@router.callback_query(lambda c: c.data == "response_yes")
async def response_yes(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_data = get_user_data(user_id)
    daily_count = user_data[0] if user_data else 0
    remaining_attempts = max(0, MAX_ATTEMPTS - daily_count)
    await bot.send_message(user_id, f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}")
    await bot.answer_callback_query(callback_query.id)

@router.callback_query(lambda c: c.data == "response_no")
async def response_no(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–∞—Ä–æ–ª–æ–≥—É @alyona_venger, –ê–ª—ë–Ω–∞ —Ç–æ—á–Ω–æ —Å–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ."
    )
    await bot.answer_callback_query(callback_query.id)

# Start the bot
async def main():
    dp.include_router(router)

    # Schedule the daily card sending at 09:00 Moscow time
    scheduler.add_job(send_daily_card, CronTrigger(hour=9, minute=0, timezone="Europe/Moscow"))
    scheduler.start()

    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

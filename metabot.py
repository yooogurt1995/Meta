from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
import random
import datetime
import asyncio
import logging
import os

# Replace with your actual Telegram bot token
API_TOKEN = '7854106709:AAHeIIyM3aUH8cxzIX68MgOxzA-XgKQ4-r0'

# Initialize logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# User data storage (mock database)
user_data = {}

# Maximum daily attempts
MAX_ATTEMPTS = 5

# Define keyboards
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")],
        [KeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—à–ª–æ–µ-–Ω–∞—Å—Ç–æ—è—â–µ–µ")],
        [KeyboardButton(text="\u2728 –û –∫–∞—Ä—Ç–∞—Ö"), KeyboardButton(text="\u2753 –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç–∞—Ä–æ–ª–æ–≥—É")],
        [KeyboardButton(text="\u2605 –ú–æ–π —Ç–∞—Ä–∏—Ñ")]
    ],
    resize_keyboard=True
)

# Define path for card images
CARD_IMAGES_PATH = "./card_images"

# Ensure the directory exists
if not os.path.exists(CARD_IMAGES_PATH):
    os.makedirs(CARD_IMAGES_PATH)

# Function to get random card images
def get_random_card_images(count=1):
    images = [f for f in os.listdir(CARD_IMAGES_PATH) if os.path.isfile(os.path.join(CARD_IMAGES_PATH, f))]
    if not images:
        raise FileNotFoundError("No card images found in the directory.")
    return random.sample(images, count)

# Helper function to initialize user data
def initialize_user_data(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            'daily_count': 0,
            'last_reset': datetime.date.today(),
            'custom_limit': None
        }

# Command handlers
@router.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    initialize_user_data(user_id)
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –ú–ê–ö –∫–∞—Ä—Ç–∞–º–∏ –æ—Ç –ê–ª–µ–Ω—ã –í–µ–Ω–≥–µ—Ä ‚ú®\n"
        "–ó–¥–µ—Å—å —Ç—ã –æ—Ç–∫—Ä–æ–µ—à—å –¥–ª—è —Å–µ–±—è –æ–≥—Ä–æ–º–Ω—ã–π –º–∏—Ä —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è, –≥–¥–µ –Ω–∞–π–¥–µ—à—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ü•∞\n\n"
        "–ú–ê–ö –∫–∞—Ä—Ç—ã - –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å–≤–æ–µ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ –±–µ–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.\n"
        "–ú–æ–∂–µ—à—å –¥–æ—Å—Ç–∞—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø—Ä–∏–Ω—è—Ç—å –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–∫–æ—É—á–∏–Ω–≥."
    )
    await message.answer(welcome_text, reply_markup=main_menu)

@router.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
async def get_card_instruction(message: types.Message):
    user_id = message.from_user.id
    initialize_user_data(user_id)
    instruction = (
        "\U0001F4DA –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É:\n"
        "1Ô∏è‚É£ –ó–∞–¥—É–º–∞–π—Ç–µ—Å—å –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç.\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É."
    )
    button = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="get_single_card")]]
    )
    await message.answer(instruction, reply_markup=button)

@router.callback_query(lambda c: c.data == "get_single_card")
async def send_single_card(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    initialize_user_data(user_id)
    user_limit = user_data[user_id].get('custom_limit', MAX_ATTEMPTS)

    if user_data[user_id]['daily_count'] >= user_limit:
        await bot.send_message(user_id, "–í–∞—à –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!")
        await bot.answer_callback_query(callback_query.id)
        return

    user_data[user_id]['daily_count'] += 1

    try:
        card_image = get_random_card_images(1)[0]
        image_path = os.path.join(CARD_IMAGES_PATH, card_image)
        await bot.send_photo(user_id, photo=FSInputFile(image_path), caption="\U0001F4C4 –í–∞—à–∞ –∫–∞—Ä—Ç–∞")
    except FileNotFoundError:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –ø–∞–ø–∫—É.")

    await bot.answer_callback_query(callback_query.id)

@router.message(lambda message: message.text == "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—à–ª–æ–µ-–Ω–∞—Å—Ç–æ—è—â–µ–µ")
async def analysis_instruction_1(message: types.Message):
    user_id = message.from_user.id
    initialize_user_data(user_id)
    instruction = (
        "1Ô∏è‚É£ –°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö, –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –≥–ª–∞–∑–∞. –ü–æ–¥—É–º–∞–π –æ –≤–æ–ø—Ä–æ—Å–µ –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç.\n"
        "–ö–æ–≥–¥–∞ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –≥–æ—Ç–æ–≤/–∞, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É."
    )
    button = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="analysis_past")]]
    )
    await message.answer(instruction, reply_markup=button)

@router.callback_query(lambda c: c.data == "analysis_past")
async def analysis_past(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    initialize_user_data(user_id)
    user_limit = user_data[user_id].get('custom_limit', MAX_ATTEMPTS)

    if user_data[user_id]['daily_count'] >= user_limit:
        await bot.send_message(user_id, "–í–∞—à –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!")
        await bot.answer_callback_query(callback_query.id)
        return

    user_data[user_id]['daily_count'] += 1

    try:
        card_image = get_random_card_images(1)[0]
        image_path = os.path.join(CARD_IMAGES_PATH, card_image)
        await bot.send_photo(user_id, photo=FSInputFile(image_path), caption="\U0001F4C4 –ö–∞—Ä—Ç–∞: –ü—Ä–æ—à–ª–æ–µ")
    except FileNotFoundError:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –ø–∞–ø–∫—É.")

    await bot.answer_callback_query(callback_query.id)

@router.message(Command(commands=['set_limit']))
async def set_custom_limit(message: types.Message):
    try:
        user_id, limit = map(int, message.text.split()[1:])
        if user_id in user_data:
            user_data[user_id]['custom_limit'] = limit
            await message.reply(f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {limit} –ø–æ–ø—ã—Ç–æ–∫.")
        else:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (ValueError, IndexError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_limit <user_id> <limit>")

# Start the bot
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
